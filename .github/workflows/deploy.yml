name: Deploy

on:
  workflow_call:
    inputs:
      IMAGE_NAME:
        required: true
        type: string
      TASK_NAME:
        required: true
        type: string
      CONTAINER_NAME:
        required: true
        type: string
      ECS_SERVICE:
        required: true
        type: string
      ECS_CLUSTER:
        required: true
        type: string
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      AWS_REGION:
        required: true
      US_EAST_1_BUNDLE:
        required: false  # Adicionando o certificado

env:
  IMAGE_NAME: ${{ inputs.IMAGE_NAME }}
  TASK_NAME: ${{ inputs.TASK_NAME }}
  CONTAINER_NAME: ${{ inputs.CONTAINER_NAME }}
  ECS_SERVICE: ${{ inputs.ECS_SERVICE }}
  ECS_CLUSTER: ${{ inputs.ECS_CLUSTER }}
  FORCE_JAVASCRIPT_ACTIONS_TO_NODE20: true  # Forçar Node.js 20

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3  # Compatível com Node.js 20

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2  # Já compatível com Node.js 20
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Write PEM file
        run: echo "${{ secrets.US_EAST_1_BUNDLE }}" > us-east-1-bundle.pem

      - name: Download task definition
        run: |
          aws ecs describe-task-definition --task-definition $TASK_NAME --query taskDefinition > task-definition.json
          jq 'del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .registeredAt, .registeredBy, .compatibilities)' task-definition.json > cleaned-task-definition.json

      - name: Login ECR
        id: login-ecr-deploy
        uses: aws-actions/amazon-ecr-login@v2  # Atualizado para a versão 2
        with:
          mask-password: true  # Máscara de senha

      - name: Extract metadata (tags, labels) for Docker
        id: metadata
        uses: docker/metadata-action@v4  # Atualizado
        env:
          TAG_SHA: ${{ github.sha }}
        with:
          images: ${{ steps.login-ecr-deploy.outputs.registry }}/${{ env.IMAGE_NAME }}
          tags: |
            latest
            ${{ env.TAG_SHA }}

      - name: Update ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: cleaned-task-definition.json
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ fromJSON(steps.metadata.outputs.json).tags[0] }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
          force-new-deployment: true
